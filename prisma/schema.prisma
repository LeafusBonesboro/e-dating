datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  follows       Follow[]   @relation("UserFollows")
  likes         Like[]
}

model Character {
  id          String    @id @default(cuid())
  name        String    @unique
  age         Int?
  nationality String?
  hairColor   String?
  eyeColor    String?
  hobbies     String?
  bio         String?
  avatarUrl   String?
  loraToken   String?

  messages    Message[]
  followers   Follow[]   @relation("CharacterFollows")
  likes       Like[]
}

model Message {
  id          String   @id @default(cuid())
  sender      String   // "user" or "character"
  content     String
  imageUrl    String?
  createdAt   DateTime @default(now())

  userId      String?
  characterId String?

  user        User?      @relation(fields: [userId], references: [id])
  character   Character? @relation(fields: [characterId], references: [id])

  @@index([characterId])
  @@index([userId])
}

model Follow {
  id          String   @id @default(cuid())
  userId      String
  characterId String

  user        User      @relation("UserFollows", fields: [userId], references: [id])
  character   Character @relation("CharacterFollows", fields: [characterId], references: [id])

  @@unique([userId, characterId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Like {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  character   Character @relation(fields: [characterId], references: [id])
  characterId String
  createdAt   DateTime  @default(now())

  @@unique([userId, characterId])
}


